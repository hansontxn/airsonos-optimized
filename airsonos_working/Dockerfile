FROM node:18-alpine

# Install dependencies
RUN apk add --no-cache avahi-tools

# Set work directory
WORKDIR /app

# Copy and run inline with better debugging
CMD ["sh", "-c", "echo 'Starting AirSonos with detailed logging...'; npm install sonos bonjour express multicast-dns && node -e \"console.log('=== AirSonos Debug Mode ==='); const sonos = require('sonos'); const bonjour = require('bonjour')(); const express = require('express'); const mdns = require('multicast-dns')(); console.log('Modules loaded successfully'); console.log('Starting Sonos device discovery...'); let deviceCount = 0; const search = sonos.DeviceDiscovery(); search.on('DeviceAvailable', (device) => { deviceCount++; console.log('=== FOUND SONOS DEVICE ==='); console.log('Device:', device.host + ':' + device.port); console.log('Creating AirPlay server', deviceCount); const app = express(); app.get('/info', (req, res) => { console.log('AirPlay info request received'); res.json({name: 'AirSonos Room ' + deviceCount, deviceid: '58:55:CA:06:12:34', features: '0x77', model: 'AirSonos,1', srcvers: '130.14'}); }); const port = 5000 + deviceCount; const server = app.listen(port, '0.0.0.0', () => { console.log('✓ HTTP server started on port', port); const serviceName = 'AirSonos Room ' + deviceCount; console.log('Publishing mDNS service:', serviceName); try { const service = bonjour.publish({ name: serviceName, type: 'raop', protocol: 'tcp', port: port, txt: { txtvers: '1', ch: '2', cn: '0,1', sr: '44100', ss: '16', pw: 'false', vn: '3', tp: 'UDP', sm: 'false', et: '0,1', md: '0,1,2', vs: '130.14', da: 'true', am: 'AirSonos,1' } }); console.log('✓ mDNS service published for:', serviceName); console.log('✓ AirPlay device should appear as:', serviceName); } catch (err) { console.error('mDNS publish error:', err); } }); server.on('error', (err) => console.error('Server error:', err)); }); search.on('timeout', () => console.log('Discovery timeout reached')); setTimeout(() => { try { search.destroy(); } catch(e) { console.log('Search cleanup done'); } console.log('=== DISCOVERY SUMMARY ==='); console.log('Total Sonos devices found:', deviceCount); if (deviceCount === 0) { console.log('No Sonos devices found, creating test server...'); const app = express(); app.get('/info', (req, res) => res.json({name: 'Test AirSonos', deviceid: '58:55:CA:06:12:34', features: '0x77'})); app.listen(5000, () => { console.log('✓ Test server on port 5000'); bonjour.publish({name: 'Test AirSonos', type: 'raop', protocol: 'tcp', port: 5000, txt: {txtvers: '1', ch: '2', sr: '44100'}}); console.log('✓ Test AirPlay service published'); }); } else { console.log('=== SUCCESS ==='); console.log('Created', deviceCount, 'AirPlay servers'); console.log('Check your AirPlay device list for:'); for(let i = 1; i <= deviceCount; i++) { console.log('  - AirSonos Room', i); } } setInterval(() => console.log('AirSonos running with', deviceCount, 'device(s)...'), 30000); }, 8000);\""]